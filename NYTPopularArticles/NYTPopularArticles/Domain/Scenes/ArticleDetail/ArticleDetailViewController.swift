//
//  ArticleDetailViewController.swift
//  NYTPopularArticles
//
//  Created by Sharon Varghese on 05/11/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ArticleDetailDisplayLogic: AnyObject
{
  func displayArticle(viewModel: ArticleDetail.ArticleItem.ViewModel)
}

class ArticleDetailViewController: UIViewController, ArticleDetailDisplayLogic
{
    
    
    var interactor: ArticleDetailBusinessLogic?
    var router: (NSObjectProtocol & ArticleDetailRoutingLogic & ArticleDetailDataPassing)?
    @IBOutlet var tableView: UITableView!
    var artilce: Article?
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ArticleDetailInteractor()
        let presenter = ArticleDetailPresenter()
        let router = ArticleDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        prepareNavigationBar()
        prepareTableView()
        showArticle()
    }
    
    // MARK: Set up Views
    
    func prepareNavigationBar() {
        navigationItem.largeTitleDisplayMode = .never
    }
    
    func prepareTableView()  {
        tableView.register(UINib(nibName: "ArticleDetailTitleTableViewCell", bundle: nil), forCellReuseIdentifier: ArticleDetailTitleTableViewCell.reuseIdentifier)
        tableView.register(UINib(nibName: "ArticleDetailImageTableViewCell", bundle: nil), forCellReuseIdentifier: ArticleDetailImageTableViewCell.reuseIdentifier)
        tableView.register(UINib(nibName: "ArticleDetailDateTableViewCell", bundle: nil), forCellReuseIdentifier: ArticleDetailDateTableViewCell.reuseIdentifier)
        tableView.register(UINib(nibName: "ArticleDetailDescriptionTableViewCell", bundle: nil), forCellReuseIdentifier: ArticleDetailDescriptionTableViewCell.reuseIdentifier)
        tableView.estimatedRowHeight = 150
    }
    
    func showArticle()
    {
        interactor?.showSelectedArticle()
    }
    
    func displayArticle(viewModel: ArticleDetail.ArticleItem.ViewModel) {
        artilce = viewModel.article
        tableView.reloadData()
    }
}
// MARK: UITableViewDataSource

extension ArticleDetailViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 4
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.row {
        case 0:
            let cell = tableView.dequeueReusableCell(withIdentifier: ArticleDetailTitleTableViewCell.reuseIdentifier, for: indexPath) as! ArticleDetailTitleTableViewCell
            cell.data = artilce?.title
            return cell
        case 1:
            let cell = tableView.dequeueReusableCell(withIdentifier: ArticleDetailImageTableViewCell.reuseIdentifier, for: indexPath) as! ArticleDetailImageTableViewCell
            let mediaMetaData = artilce?.media?.first?.mediaMetadata?.filter{ $0.format == .mediumThreeByTwo440 }
            cell.data = mediaMetaData?.first?.url
            return cell
        case 2:
            let cell = tableView.dequeueReusableCell(withIdentifier: ArticleDetailDateTableViewCell.reuseIdentifier, for: indexPath) as! ArticleDetailDateTableViewCell
            cell.byText = artilce?.byline
            cell.dateString = artilce?.updated
            return cell
        case 3:
            let cell = tableView.dequeueReusableCell(withIdentifier: ArticleDetailDescriptionTableViewCell.reuseIdentifier, for: indexPath) as! ArticleDetailDescriptionTableViewCell
            cell.data = artilce?.abstract
            return cell
        default:
            return UITableViewCell()
        }
    }
    
}
// MARK: UITableViewDelegate

extension ArticleDetailViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
}
