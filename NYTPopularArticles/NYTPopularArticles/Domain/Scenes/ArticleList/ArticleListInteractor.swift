//
//  ArticleListInteractor.swift
//  NYTPopularArticles
//
//  Created by Sharon Varghese on 05/11/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ArticleListBusinessLogic
{
    func getSelectedArticle(_ selectedArticle: Article?)
    func fetchArticles(numberOfDays: Int, completion: @escaping (Result<[Article]?, ErrorInfo>)->())
}

protocol ArticleListDataStore
{
    var articles: [Article]? { get set }
    var article: Article? { get set }
}

class ArticleListInteractor: ArticleListBusinessLogic, ArticleListDataStore
{

    var presenter: ArticleListPresentationLogic?
    var worker = ArticleListWorker()
    var articles: [Article]?
    var article: Article?
        
    // MARK: Fetch Articles
    func fetchArticles(numberOfDays: Int, completion: @escaping (Result<[Article]?, ErrorInfo>) -> ()) {
        worker.fetchArticles(numberOfDays: numberOfDays, completion: { result in
            switch result {
            case .success(let data):
                self.articles = data
                let response = ArticleList.FetchArticleList.Response(articles: self.articles, error: nil)
                self.presenter?.presentArticleList(response: response)
                completion (.success(data))
            case .failure(let error):
                let response = ArticleList.FetchArticleList.Response(articles: nil, error: error)
                self.presenter?.presentArticleList(response: response)
                completion (.failure(error))
            }
        })
        
        
    }
    
    func getSelectedArticle(_ selectedArticle: Article?) {
        article = selectedArticle
    }
    

}
